<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dashboard</name>
    </assembly>
    <members>
        <member name="T:Dashboard.Controllers.AlertController">
            <summary>
            Alert Controller
            </summary>
            <param name="alertRepository"></param>
        </member>
        <member name="M:Dashboard.Controllers.AlertController.#ctor(Dashboard.Repository.Interfaces.IAlertRepository)">
            <summary>
            Alert Controller
            </summary>
            <param name="alertRepository"></param>
        </member>
        <member name="M:Dashboard.Controllers.AlertController.GetAlertsByPagination(System.Int32,System.Int32)">
            <summary>
            Get alerts by pages
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="T:Dashboard.Controllers.AuthController">
            <summary>
            Auth controller
            </summary>
        </member>
        <member name="M:Dashboard.Controllers.AuthController.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Dashboard.Repository.Interfaces.IUserRepository,Dashboard.Services.BrokerService)">
            <summary>
            Auth controller
            </summary>
        </member>
        <member name="M:Dashboard.Controllers.AuthController.Login(RealTimeComTest.Models.ViewModels.Request.RequestUser)">
            <summary>
            Login route
            </summary>
            <param name="requestUser"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Controllers.AuthController.SignUp(RealTimeComTest.Models.ViewModels.Request.RequestUser,System.String)">
            <summary>
            Sign up
            </summary>
            <param name="requestUser"></param>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Controllers.AuthController.Logout">
            <summary>
            Log Out Route
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Controllers.AuthController.RefreshToken">
            <summary>
            Refresh token for auth
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dashboard.Controllers.InventoryController">
            <summary>
            Inventory Controller
            </summary>
            <param name="inventoryRepository"></param>
        </member>
        <member name="M:Dashboard.Controllers.InventoryController.#ctor(Dashboard.Repository.Interfaces.IInventoryRepository)">
            <summary>
            Inventory Controller
            </summary>
            <param name="inventoryRepository"></param>
        </member>
        <member name="M:Dashboard.Controllers.InventoryController.GetProductByPagination(System.Int32,System.Int32,System.String)">
            <summary>
            Get Product / Inventory By Pagination and FilterKey
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="filterKey"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Controllers.InventoryController.AddInventoryWithProductId(System.Int32,System.Int32)">
            <summary>
            Add Inventory With Product Id
            </summary>
            <param name="productId"></param>
            <param name="stockRequire"></param>
            <returns></returns>
        </member>
        <member name="T:Dashboard.Controllers.MqttController">
            <summary>
            Mqtt Controller
            </summary>
            <param name="mqttService"></param>
        </member>
        <member name="M:Dashboard.Controllers.MqttController.#ctor(Dashboard.Services.MqttService)">
            <summary>
            Mqtt Controller
            </summary>
            <param name="mqttService"></param>
        </member>
        <member name="M:Dashboard.Controllers.MqttController.Publish(System.String,System.String)">
            <summary>
            Publish New Message
            </summary>
            <param name="topic"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Controllers.MqttController.Subscribe(System.String)">
            <summary>
            Sub topic
            </summary>
            <param name="topic"></param>
            <returns></returns>
        </member>
        <member name="T:Dashboard.Controllers.OrderController">
            <summary>
            Order Controller
            </summary>
            <param name="orderRepository"></param>
        </member>
        <member name="M:Dashboard.Controllers.OrderController.#ctor(Dashboard.Repository.Interfaces.IOrderRepository)">
            <summary>
            Order Controller
            </summary>
            <param name="orderRepository"></param>
        </member>
        <member name="M:Dashboard.Controllers.OrderController.PlaceOrder(System.Collections.Generic.List{Dashboard.Models.DTOs.Request.RequestOrderItem})">
            <summary>
            Place New Order
            </summary>
            <param name="products"></param>
            <returns></returns>
        </member>
        <member name="T:Dashboard.Controllers.RevenueController">
            <summary>
            Revenue Controller
            </summary>
        </member>
        <member name="M:Dashboard.Controllers.RevenueController.#ctor(Dashboard.Repository.Interfaces.IRevenueRepository)">
            <summary>
            Revenue Controller
            </summary>
        </member>
        <member name="M:Dashboard.Controllers.RevenueController.GetProductCostWithIdOrName(System.Nullable{System.Int32},System.String)">
            <summary>
            Get product from id or name
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <returns></returns>
            <exception cref="T:Dashboard.Utility.CustomException"></exception>
        </member>
        <member name="M:Dashboard.Controllers.RevenueController.GetAllSearchValuesByPagination(System.Int32,System.Int32)">
            <summary>
            Get All Search Values By Pagination
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Controllers.RevenueController.GetRevenueStatsBasedOnDays(System.String)">
            <summary>
            Get Revenue Stats Based On Days
            </summary>
            <param name="days"></param>
            <returns></returns>
        </member>
        <member name="T:Dashboard.Controllers.SalesController">
            <summary>
            Sales Controller
            </summary>
            <param name="salesRepository"></param>
        </member>
        <member name="M:Dashboard.Controllers.SalesController.#ctor(Dashboard.Repository.Interfaces.ISalesRepository)">
            <summary>
            Sales Controller
            </summary>
            <param name="salesRepository"></param>
        </member>
        <member name="M:Dashboard.Controllers.SalesController.GetSalesStatsByCategoryBasedOnDays(System.String)">
            <summary>
            Get Sales by Category
            </summary>
            <param name="days"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Controllers.SalesController.GetOverallSalesStatsBasedOnDays(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get Overall Sales
            </summary>
            <param name="year"></param>
            <param name="month"></param>
            <param name="day"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Controllers.SalesController.GetTopSellingProductsByPagination(System.Int32,System.Int32)">
            <summary>
            Get Top Selling Products
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Controllers.SalesController.GetTopSellingCategoriesByPagination(System.Int32,System.Int32)">
            <summary>
            Get Top Selling Categories
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="P:Dashboard.DataContext.ApiContext.RevenueSPResponses">
            <summary>
            Revenue SP response
            </summary>
        </member>
        <member name="P:Dashboard.DataContext.ApiContext.SalesByCategorySPResponses">
            <summary>
            Sales By Category SP Responses
            </summary>
        </member>
        <member name="P:Dashboard.DataContext.ApiContext.TotalSalesSPResponses">
            <summary>
            Total Sales SP Responses
            </summary>
        </member>
        <member name="P:Dashboard.DataContext.ApiContext.TopSellingProductsSPResponses">
            <summary>
            Top Selling Products SP Responses
            </summary>
        </member>
        <member name="T:Dashboard.Models.DTOs.Request.RequestOrderItem">
            <summary>
            Request Order Item
            </summary>
        </member>
        <member name="P:Dashboard.Models.DTOs.Request.RequestOrderItem.ProductId">
            <summary>
            product Id
            </summary>
        </member>
        <member name="P:Dashboard.Models.DTOs.Request.RequestOrderItem.Quantity">
            <summary>
            quantity
            </summary>
        </member>
        <member name="T:Dashboard.Models.DTOs.Response.RevenueSPResponse">
            <summary>
            Response type of revenue
            </summary>
        </member>
        <member name="P:Dashboard.Models.DTOs.Response.RevenueSPResponse.CategoryName">
            <summary>
            Category Name
            </summary>
        </member>
        <member name="P:Dashboard.Models.DTOs.Response.RevenueSPResponse.Revenue">
            <summary>
            Total Revenue
            </summary>
        </member>
        <member name="P:Dashboard.Models.DTOs.Response.RevenueSPResponse.Profit">
            <summary>
            Net Profit
            </summary>
        </member>
        <member name="T:Dashboard.Models.DTOs.Response.SalesByCategorySPResponse">
            <summary>
            Sales by category sp response
            </summary>
        </member>
        <member name="P:Dashboard.Models.DTOs.Response.SalesByCategorySPResponse.CategoryId">
            <summary>
            Category id
            </summary>
        </member>
        <member name="P:Dashboard.Models.DTOs.Response.SalesByCategorySPResponse.Category">
            <summary>
            Category Name
            </summary>
        </member>
        <member name="P:Dashboard.Models.DTOs.Response.SalesByCategorySPResponse.TotalSales">
            <summary>
            Total Sales
            </summary>
        </member>
        <member name="T:Dashboard.Models.DTOs.Response.TopSellingProductsSPResponse">
            <summary>
            Top Selling Products SP Response
            </summary>
        </member>
        <member name="P:Dashboard.Models.DTOs.Response.TopSellingProductsSPResponse.Id">
            <summary>
            id
            </summary>
        </member>
        <member name="P:Dashboard.Models.DTOs.Response.TopSellingProductsSPResponse.Name">
            <summary>
            name
            </summary>
        </member>
        <member name="P:Dashboard.Models.DTOs.Response.TopSellingProductsSPResponse.TotalSales">
            <summary>
            total sales
            </summary>
        </member>
        <member name="T:Dashboard.Models.DTOs.Response.TotalSalesSPResponse">
            <summary>
            Total Sales SP Res
            </summary>
        </member>
        <member name="P:Dashboard.Models.DTOs.Response.TotalSalesSPResponse.TotalQuantity">
            <summary>
            total quantity
            </summary>
        </member>
        <member name="P:Dashboard.Models.DTOs.Response.TotalSalesSPResponse.CurrentDateTime">
            <summary>
            current timestamp
            </summary>
        </member>
        <member name="T:Dashboard.Program">
            <summary>
            Program.cs
            </summary>
        </member>
        <member name="M:Dashboard.Program.Main(System.String[])">
            <summary>
            Main Endpoint
            </summary>
            <param name="args"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:Dashboard.Repository.AlertRepository">
            <summary>
            Alert Repo
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Dashboard.Repository.AlertRepository.#ctor(Dashboard.DataContext.ApiContext)">
            <summary>
            Alert Repo
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Dashboard.Repository.AlertRepository.GetAllAlerts(System.Int32,System.Int32)">
            <summary>
            Get All Alerts
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <returns></returns>
            <exception cref="T:Dashboard.Utility.CustomException"></exception>
        </member>
        <member name="T:Dashboard.Repository.Interfaces.IAlertRepository">
            <summary>
            Interface for Alert Respository
            </summary>
        </member>
        <member name="M:Dashboard.Repository.Interfaces.IAlertRepository.GetAllAlerts(System.Int32,System.Int32)">
            <summary>
            Get All Repos
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="T:Dashboard.Repository.Interfaces.IInventoryRepository">
            <summary>
            Inventory Repoistory Interface
            </summary>
        </member>
        <member name="M:Dashboard.Repository.Interfaces.IInventoryRepository.GetInventoryByPagination(System.Int32,System.Int32,System.String)">
            <summary>
            Get Inventory By Pagination
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="filterKey"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Repository.Interfaces.IInventoryRepository.AddInventoryByProductId(System.Int32,System.Int32,System.String)">
            <summary>
            Add Inventory By Product Id
            </summary>
            <param name="productId"></param>
            <param name="stockRequire"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:Dashboard.Repository.Interfaces.IOrderRepository">
            <summary>
            Interface for Order Respository
            </summary>
        </member>
        <member name="M:Dashboard.Repository.Interfaces.IOrderRepository.PlaceOrder(System.Collections.Generic.List{Dashboard.Models.DTOs.Request.RequestOrderItem})">
            <summary>
            Place new Order
            </summary>
            <param name="orderItems"></param>
            <returns></returns>
        </member>
        <member name="T:Dashboard.Repository.Interfaces.IRevenueRepository">
            <summary>
            Revenue Repo Interface
            </summary>
        </member>
        <member name="M:Dashboard.Repository.Interfaces.IRevenueRepository.GetProductCostById(System.Int32)">
            <summary>
            Get Product by product id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Repository.Interfaces.IRevenueRepository.GetProductCostByName(System.String)">
            <summary>
            Get Product by product name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Repository.Interfaces.IRevenueRepository.GetAllSearchValuesByPagination(System.Int32,System.Int32)">
            <summary>
            Get Top search value by page and page size
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Repository.Interfaces.IRevenueRepository.GetRevenueStatsBasedOnDays(System.Int32)">
            <summary>
            Get Revenue Stats Based On Days
            </summary>
            <param name="days"></param>
            <returns></returns>
        </member>
        <member name="T:Dashboard.Repository.Interfaces.ISalesRepository">
            <summary>
            Interface for Sales Respository
            </summary>
        </member>
        <member name="M:Dashboard.Repository.Interfaces.ISalesRepository.GetSalesStatsByCategoryBasedOnDays(System.Int32)">
            <summary>
            Get Sales Stats By Category Based On Days
            </summary>
            <param name="days"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Repository.Interfaces.ISalesRepository.GetOverallSalesStatsBasedOnDays(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get Overall Sales Stats Based On Days
            </summary>
            <param name="year"></param>
            <param name="month"></param>
            <param name="day"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Repository.Interfaces.ISalesRepository.GetTopSellingProductsByPagination(System.Int32,System.Int32)">
            <summary>
            Get Top Selling Products By Pagination
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Repository.Interfaces.ISalesRepository.GetTopSellingCategoriesByPagination(System.Int32,System.Int32)">
            <summary>
            Get Top Selling Categories By Pagination
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="T:Dashboard.Repository.Interfaces.IUserRepository">
            <summary>
            Interface for user repository operations.
            Provides methods for managing user data.
            </summary>
        </member>
        <member name="M:Dashboard.Repository.Interfaces.IUserRepository.GetUserByUserName(System.String)">
            <summary>
            Retrieves a user by their username.
            </summary>
            <param name="username">The username of the user to retrieve.</param>
            <returns>The user with the specified username.</returns>
        </member>
        <member name="M:Dashboard.Repository.Interfaces.IUserRepository.AddNewUser(Dashboard.Models.User)">
            <summary>
            Adds a new user to the repository.
            </summary>
            <param name="user">The user to add.</param>
        </member>
        <member name="M:Dashboard.Repository.Interfaces.IUserRepository.Save">
            <summary>
            Saves all changes made to the repository.
            </summary>
        </member>
        <member name="T:Dashboard.Repository.InventoryRepository">
            <summary>
            Inventory Repo
            </summary>
            <param name="apiContext"></param>
            <param name="mqttService"></param>
        </member>
        <member name="M:Dashboard.Repository.InventoryRepository.#ctor(Dashboard.DataContext.ApiContext,Dashboard.Services.MqttService)">
            <summary>
            Inventory Repo
            </summary>
            <param name="apiContext"></param>
            <param name="mqttService"></param>
        </member>
        <member name="M:Dashboard.Repository.InventoryRepository.GetInventoryByPagination(System.Int32,System.Int32,System.String)">
            <summary>
            Get Inventory By Pagination
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="filterKey"></param>
            <returns></returns>
            <exception cref="T:Dashboard.Utility.CustomException"></exception>
        </member>
        <member name="M:Dashboard.Repository.InventoryRepository.AddInventoryByProductId(System.Int32,System.Int32,System.String)">
            <summary>
            Add Inventory By Product Id
            </summary>
            <param name="productId"></param>
            <param name="stockRequire"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:Dashboard.Repository.OrderRepository">
            <summary>
            Order Repo
            </summary>
            <param name="context"></param>
            <param name="mqttService"></param>
        </member>
        <member name="M:Dashboard.Repository.OrderRepository.#ctor(Dashboard.DataContext.ApiContext,Dashboard.Services.MqttService)">
            <summary>
            Order Repo
            </summary>
            <param name="context"></param>
            <param name="mqttService"></param>
        </member>
        <member name="M:Dashboard.Repository.OrderRepository.PlaceOrder(System.Collections.Generic.List{Dashboard.Models.DTOs.Request.RequestOrderItem})">
            <summary>
            Place new Order
            </summary>
            <param name="orderItems"></param>
            <returns></returns>
            <exception cref="T:Dashboard.Utility.CustomException"></exception>
        </member>
        <member name="T:Dashboard.Repository.RevenueRepository">
            <summary>
            Revenue Repo
            </summary>
            <param name="apiContext"></param>
        </member>
        <member name="M:Dashboard.Repository.RevenueRepository.#ctor(Dashboard.DataContext.ApiContext)">
            <summary>
            Revenue Repo
            </summary>
            <param name="apiContext"></param>
        </member>
        <member name="M:Dashboard.Repository.RevenueRepository.GetProductCostById(System.Int32)">
            <summary>
            Get Product by product id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Repository.RevenueRepository.GetProductCostByName(System.String)">
            <summary>
            Get Product by product name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Repository.RevenueRepository.GetAllSearchValuesByPagination(System.Int32,System.Int32)">
            <summary>
            Get Top search value by page and page size
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Repository.RevenueRepository.GetRevenueStatsBasedOnDays(System.Int32)">
            <summary>
            Get Top 10 Revenue And  Profit
            </summary>
            <param name="days"></param>
            <returns></returns>
        </member>
        <member name="T:Dashboard.Repository.SalesRepository">
            <summary>
            Sales Repo
            </summary>
            <param name="apiContext"></param>
        </member>
        <member name="M:Dashboard.Repository.SalesRepository.#ctor(Dashboard.DataContext.ApiContext)">
            <summary>
            Sales Repo
            </summary>
            <param name="apiContext"></param>
        </member>
        <member name="M:Dashboard.Repository.SalesRepository.GetSalesStatsByCategoryBasedOnDays(System.Int32)">
            <summary>
            Get Sales Stats By Category Based On Days
            </summary>
            <param name="days"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Repository.SalesRepository.GetOverallSalesStatsBasedOnDays(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get Overall Sales Stats Based On Days
            </summary>
            <param name="year"></param>
            <param name="month"></param>
            <param name="day"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Repository.SalesRepository.GetTopSellingProductsByPagination(System.Int32,System.Int32)">
            <summary>
            Get Top Selling Products By Pagination
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <returns></returns>
            <exception cref="T:Dashboard.Utility.CustomException"></exception>
        </member>
        <member name="M:Dashboard.Repository.SalesRepository.GetTopSellingCategoriesByPagination(System.Int32,System.Int32)">
            <summary>
            Get Top Selling Categories By Pagination
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <returns></returns>
            <exception cref="T:Dashboard.Utility.CustomException"></exception>
        </member>
        <member name="T:Dashboard.Repository.UserRepository">
            <summary>
            Repository for managing user data.
            Provides methods for retrieving, adding, and saving users.
            </summary>
            <param name="context">The DbContext instance to use for database operations.</param>
        </member>
        <member name="M:Dashboard.Repository.UserRepository.#ctor(Dashboard.DataContext.ApiContext)">
            <summary>
            Repository for managing user data.
            Provides methods for retrieving, adding, and saving users.
            </summary>
            <param name="context">The DbContext instance to use for database operations.</param>
        </member>
        <member name="M:Dashboard.Repository.UserRepository.GetUserByUserName(System.String)">
            <summary>
            Retrieves a user by their username.
            </summary>
            <param name="username">The username of the user to retrieve.</param>
            <returns>The user with the specified username.</returns>
            <exception cref="T:Dashboard.Utility.CustomException">Thrown when no user with the specified username is found.</exception>
        </member>
        <member name="M:Dashboard.Repository.UserRepository.AddNewUser(Dashboard.Models.User)">
            <summary>
            Adds a new user to the repository.
            </summary>
            <param name="user">The user to add.</param>
            <exception cref="T:Dashboard.Utility.CustomException">Thrown when a user with the specified username already exists.</exception>
        </member>
        <member name="M:Dashboard.Repository.UserRepository.Save">
            <summary>
            Saves all changes made to the repository.
            </summary>
        </member>
        <member name="T:Dashboard.Services.BackgroundJobService">
            <summary>
            Bg Service
            </summary>
            <param name="context"></param>
            <param name="mqttService"></param>
            <param name="orderRepository"></param>
        </member>
        <member name="M:Dashboard.Services.BackgroundJobService.#ctor(Dashboard.DataContext.ApiContext,Dashboard.Services.MqttService,Dashboard.Repository.Interfaces.IOrderRepository)">
            <summary>
            Bg Service
            </summary>
            <param name="context"></param>
            <param name="mqttService"></param>
            <param name="orderRepository"></param>
        </member>
        <member name="M:Dashboard.Services.BackgroundJobService.RestockBasedOnNotification">
            <summary>
            Restock Notification at Midnight
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Services.BackgroundJobService.UpdateAverageDailyUsageAndReorderPointForAllProducts">
            <summary>
            Update Avg Daily Usage and Reorder Point for all products
            </summary>
        </member>
        <member name="M:Dashboard.Services.BackgroundJobService.ProcessExcelAndPlaceOrders(System.String)">
            <summary>
            Get Excel Data and send req of orders
            </summary>
            <param name="excelFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Services.BackgroundJobService.GetTotalOrderInLast60Sec">
            <summary>
            Get Total Orders in Last 1 min
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dashboard.Services.BrokerService">
            <summary>
            Broker Service
            </summary>
        </member>
        <member name="M:Dashboard.Services.BrokerService.AddUser(System.String,System.String,System.String)">
            <summary>
            Add User to broker
            </summary>
            <param name="Username"></param>
            <param name="Password"></param>
            <param name="Role"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Dashboard.Services.BrokerService.LoginUser(System.String,System.String,System.String)">
            <summary>
            Login user to broker
            </summary>
            <param name="Username"></param>
            <param name="Password"></param>
            <param name="Role"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Dashboard.Services.BrokerService.LogoutUser(System.String)">
            <summary>
            Logout User to broker
            </summary>
            <param name="Username"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Dashboard.Services.BrokerService.RefreshUser(System.String,System.String)">
            <summary>
            Refresh User in broker
            </summary>
            <param name="Username"></param>
            <param name="Password"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Dashboard.Services.BrokerService.RunMosquittoCtrlCommand(System.String)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="T:Dashboard.Services.CommandResult">
            <summary>
            DYNSEC Command results
            </summary>
        </member>
        <member name="P:Dashboard.Services.CommandResult.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="P:Dashboard.Services.CommandResult.Output">
            <summary>
            Output
            </summary>
        </member>
        <member name="P:Dashboard.Services.CommandResult.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="T:Dashboard.Services.MqttService">
            <summary>
            Mqtt Service
            </summary>
        </member>
        <member name="M:Dashboard.Services.MqttService.#ctor">
            <summary>
            mqtt service constructor
            </summary>
        </member>
        <member name="M:Dashboard.Services.MqttService.ConnectAsync">
            <summary>
            Connect async with admin
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Services.MqttService.SubscribeAsync(System.String)">
            <summary>
            sub
            </summary>
            <param name="topic"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Services.MqttService.PublishAsync(System.String,System.String)">
            <summary>
            pub
            </summary>
            <param name="topic"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:Dashboard.Services.SMTPService">
            <summary>
            Email Sender class for Papercut SMTP
            </summary>
        </member>
        <member name="M:Dashboard.Services.SMTPService.#ctor">
            <summary>
            Email sender constructor
            </summary>
        </member>
        <member name="M:Dashboard.Services.SMTPService.SendEmail(System.String,System.String,System.String,System.String)">
            <summary>
            Send Email message
            </summary>
        </member>
        <member name="M:Dashboard.Services.SMTPService.SendInventoryRequest(Dashboard.Models.Supplier,Dashboard.Models.Product,System.Int32,Dashboard.Models.User)">
            <summary>
            Request Supplier for stocks
            </summary>
            <param name="reciver"></param>
            <param name="product"></param>
            <param name="stockRequire"></param>
            <param name="user"></param>
        </member>
        <member name="T:Dashboard.Utility.CustomException">
            <summary>
            Custom Exception class
            </summary>
            <remarks>
            constructor for custom exception
            </remarks>
            <param name="message"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Dashboard.Utility.CustomException.#ctor(System.String,System.Int32)">
            <summary>
            Custom Exception class
            </summary>
            <remarks>
            constructor for custom exception
            </remarks>
            <param name="message"></param>
            <param name="statusCode"></param>
        </member>
        <member name="F:Dashboard.Utility.CustomException.StatusCode">
            <summary>
            Status Code
            </summary>
        </member>
        <member name="F:Dashboard.Utility.CustomException.ErrorMessage">
            <summary>
            Error Message
            </summary>
        </member>
        <member name="T:Dashboard.Utility.Jwt">
            <summary>
            Jwt class with primary constructor y
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:Dashboard.Utility.Jwt.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Jwt class with primary constructor y
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:Dashboard.Utility.Jwt.GenerateJwtToken(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Generate JWT token with claim idenetity 
            </summary>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:Dashboard.Utility.Jwt.ValidateJwtToken(System.String)">
            <summary>
            Validate and return token principal
            </summary>
            <param name="token"></param>
            <returns></returns>
            <exception cref="T:Microsoft.IdentityModel.Tokens.SecurityTokenException"></exception>
        </member>
        <member name="T:Dashboard.Utility.Logger">
            <summary>
            Logger Class
            </summary>
        </member>
        <member name="M:Dashboard.Utility.Logger.LogException(System.Exception)">
            <summary>
            Log Exception into LogFile
            </summary>
            <param name="ex"></param>
        </member>
        <member name="T:Dashboard.Utility.Validation.ValidationUtility">
            <summary>
            Validation class as utility
            </summary>
        </member>
        <member name="M:Dashboard.Utility.Validation.ValidationUtility.PageInfoValidator(System.Int32,System.Int32)">
            <summary>
            Validate Page Size and Page Number
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:RealTimeComTest.Models.ViewModels.Request.RequestUser">
            <summary>
            user request model
            </summary>
        </member>
        <member name="P:RealTimeComTest.Models.ViewModels.Request.RequestUser.Username">
            <summary>
            Username is required and has limit between 2 to 300
            </summary>
        </member>
        <member name="P:RealTimeComTest.Models.ViewModels.Request.RequestUser.Password">
            <summary>
            Password is Required 
            </summary>
        </member>
        <member name="T:RealTimeComTest.Models.LoginResponse">
            <summary>
            Login Respose model for session token login response
            </summary>
        </member>
        <member name="P:RealTimeComTest.Models.LoginResponse.Username">
            <summary>
            Username is required and has limit between 2 to 300
            </summary>
        </member>
        <member name="P:RealTimeComTest.Models.LoginResponse.Role">
            <summary>
            Role of the User
            </summary>
        </member>
        <member name="P:RealTimeComTest.Models.LoginResponse.SessionToken">
            <summary>
            Session token
            </summary>
        </member>
        <member name="P:RealTimeComTest.Models.LoginResponse.TokenExpirationTime">
            <summary>
            Token Expiration Time
            </summary>
        </member>
    </members>
</doc>
